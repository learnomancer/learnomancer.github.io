[{"content":"Learn how to apply animations across your eLearning project with just one Execute Javascript trigger!\nNo Format Painter! No going back to tediously apply animations or states manually.\nIn this video tutorial, I\u0026rsquo;ll guide you through the steps to apply hover animations to multiple elements in your Storyline projects using a single master slide trigger.\nThis method is perfect for large projects with varied interactive components, ensuring uniformity and saving you tons of time. We\u0026rsquo;ll cover how to use JavaScript and GSAP to create engaging, responsive animations that enhance user interactions.\nHere\u0026rsquo;s the video Code used Adding movement 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;interactable\u0026#39;]\u0026#34;).forEach(element =\u0026gt; { // Create a new timeline for each element, paused initially let tl = gsap.timeline({ paused: true }); // Define the animation for this specific element tl.to(element, { yPercent: -10, duration: 0.3 }); // Set up event listeners for this element element.addEventListener(\u0026#39;mouseenter\u0026#39;, () =\u0026gt; { tl.play(); }); element.addEventListener(\u0026#39;mouseleave\u0026#39;, () =\u0026gt; { tl.reverse(); }); }); Change to hand cursor 1 2 3 4 5 6 7 8 9 10 element.addEventListener(\u0026#39;mouseenter\u0026#39;, () =\u0026gt; { element.style.cursor = \u0026#39;pointer\u0026#39;; tl.play(); }); element.addEventListener(\u0026#39;mouseleave\u0026#39;, () =\u0026gt; { element.style.cursor = \u0026#39;\u0026#39;; tl.reverse(); }); ","permalink":"https://learnomancer.github.io/posts/one-trigger-to-rule-them-all/","summary":"Learn how to apply animations across your eLearning project with just one Execute Javascript trigger!\nNo Format Painter! No going back to tediously apply animations or states manually.\nIn this video tutorial, I\u0026rsquo;ll guide you through the steps to apply hover animations to multiple elements in your Storyline projects using a single master slide trigger.\nThis method is perfect for large projects with varied interactive components, ensuring uniformity and saving you tons of time.","title":"Animate Multiple Elements with One Trigger across your Storyline 360 Project using Javascript"},{"content":"In this video tutorial, I\u0026rsquo;ll walk you through the process of creating a dynamic slide in Articulate Storyline 360 where a random sentence from a list appears each time you click a button.\nWith just a few lines of JavaScript, you can add an interactive element to your e-learning courses that keeps learners engaged and curious.\nHere\u0026rsquo;s what we\u0026rsquo;ll cover:\nSetting up the slide and button in Storyline Creating a Storyline variable to store the extracted sentence Preparing the text box to display sentences of varying lengths Adding JavaScript to select a random sentence from a list Inserting the extracted sentence back into the Storyline variable -Testing and publishing the slide to see the random sentence generator in action Here\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var player = GetPlayer(); var sentence = player.GetVar(\u0026#34;sentence\u0026#34;); const missions = [ \u0026#34;Infiltrate a high-security gala in Monaco to retrieve stolen nuclear codes from a rogue agent.\u0026#34;, \u0026#34;Disarm a series of strategically placed bombs in a bustling metropolis, racing against a ticking clock.\u0026#34;, \u0026#34;Pose as a corrupt businessman to gain access to a secret meeting of international arms dealers.\u0026#34;, \u0026#34;Dive into the depths of the Arctic Ocean to recover a mysterious device from a sunken submarine.\u0026#34;, \u0026#34;Scale the Burj Khalifa using advanced technology to intercept a crucial data transfer.\u0026#34;, \u0026#34;Navigate the alleyways of Marrakesh to track down and extract a double agent before they are eliminated.\u0026#34;, \u0026#34;Attend a high-stakes poker game in Montenegro to uncover a financier funding global terrorism.\u0026#34;, \u0026#34;Hack into a secure server in Shanghai to erase all traces of a false identity created by enemy spies.\u0026#34;, \u0026#34;Survive a relentless pursuit through the jungles of South America after obtaining vital intelligence.\u0026#34;, \u0026#34;Disguise and insert into a paramilitary group in Eastern Europe to prevent a violent uprising.\u0026#34;, \u0026#34;Sneak onto a luxury yacht in the Mediterranean Sea to capture a key suspect without alerting the security detail.\u0026#34;, \u0026#34;Decode an encrypted message that points to a hidden cache of chemical weapons in a remote Siberian facility.\u0026#34;, \u0026#34;Disguise as a renowned art dealer to attend an exclusive auction where a stolen microchip is being sold.\u0026#34;, \u0026#34;Pilot a stealth drone over hostile territory to gather critical intelligence on a new missile system.\u0026#34;, \u0026#34;Negotiate the release of hostages from a fortified compound in North Africa under the guise of a diplomat.\u0026#34;, \u0026#34;Track down a cyber-terrorist in Tokyo using only bits of information from intercepted communications.\u0026#34;, \u0026#34;Plant surveillance devices in the embassy of a hostile nation during a high-profile diplomatic reception.\u0026#34;, \u0026#34;Retrieve a rare piece of technology from a heavily guarded research lab in Silicon Valley.\u0026#34;, \u0026#34;Infiltrate a rogue faction\u0026#39;s training camp to thwart a planned attack on an international summit.\u0026#34;, \u0026#34;Escape from a high-speed train carrying a defector who possesses knowledge about a corrupt government official.\u0026#34; ]; sentence = missions[Math.floor(Math.random() * missions.length)]; player.SetVar(\u0026#34;sentence\u0026#34;, sentence); ","permalink":"https://learnomancer.github.io/posts/pick-random-sentence/","summary":"In this video tutorial, I\u0026rsquo;ll walk you through the process of creating a dynamic slide in Articulate Storyline 360 where a random sentence from a list appears each time you click a button.\nWith just a few lines of JavaScript, you can add an interactive element to your e-learning courses that keeps learners engaged and curious.\nHere\u0026rsquo;s what we\u0026rsquo;ll cover:\nSetting up the slide and button in Storyline Creating a Storyline variable to store the extracted sentence Preparing the text box to display sentences of varying lengths Adding JavaScript to select a random sentence from a list Inserting the extracted sentence back into the Storyline variable -Testing and publishing the slide to see the random sentence generator in action Here\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var player = GetPlayer(); var sentence = player.","title":"Pick a Random Sentence from a list in Articulate Storyline 360 with JavaScript"},{"content":"In this video, we\u0026rsquo;ll go through a bit of a tutorial on how to explore the practical side of gamification by crafting a dynamic progress bar in Articulate Storyline 360 that updates when the user earns points or gains levels.\nThe scenario: The user gains some experience points when they\u0026rsquo;re correctly answering a question. When they reach 1000 XP points, they gain a level. I want to show their progress using a progress bar.\nðŸŽ® What I\u0026rsquo;m attempting here is to replicate the progress bars commonly seen in video games, trying to make learning feel more like a rewarding journey and impart a sense of achievement.\nI also reference Duolingo, the language learning app, because I think they\u0026rsquo;ve implemented a cool progress bar which actually helps learners measure their learning objectives.\nðŸ’¡ Here\u0026rsquo;s what we\u0026rsquo;ll cover :\nPractical tips for setting up your Articulate Storyline project efficiently. A breakdown of the JavaScript code required to create an interactive progress bar. Solutions to common challenges you might face while implementing this functionality in your projects. Here\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 var progressBar = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;progressBar\u0026#39;]\u0026#34;); var levelText = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;levelText\u0026#39;]\u0026#34;); var player = GetPlayer(); var XP_requiredPoints = player.GetVar(\u0026#34;XP_requiredPoints\u0026#34;); var XP_displayedPoints = player.GetVar(\u0026#34;XP_displayedPoints\u0026#34;); var XP_gainedPoints = player.GetVar(\u0026#34;XP_gainedPoints\u0026#34;); var XP_totalUserPoints = player.GetVar(\u0026#34;XP_totalUserPoints\u0026#34;) var objectScale; var currentLevel = player.GetVar(\u0026#34;currentLevel\u0026#34;);; var levelsGained; XP_displayedPoints = XP_displayedPoints + XP_gainedPoints; XP_totalUserPoints = XP_totalUserPoints + XP_gainedPoints; player.SetVar(\u0026#34;XP_totalUserPoints\u0026#34;,XP_totalUserPoints); //add level levelsGained = Math.floor(XP_displayedPoints / XP_requiredPoints); currentLevel = currentLevel + levelsGained; player.SetVar(\u0026#34;currentLevel\u0026#34;, currentLevel); if(levelsGained \u0026gt;= 1){ gsap.to(levelText, {scale:1.2, repeat:1, yoyo:true, ease: \u0026#34;power2.inOut\u0026#34;}); }; if (XP_displayedPoints \u0026gt;= XP_requiredPoints) { XP_displayedPoints = XP_displayedPoints - XP_requiredPoints; player.SetVar(\u0026#34;XP_displayedPoints\u0026#34;,XP_displayedPoints); } else{ player.SetVar(\u0026#34;XP_displayedPoints\u0026#34;,XP_displayedPoints); }; objectScale = XP_displayedPoints / XP_requiredPoints; // Animate the progress bar from the current scale to the new scale gsap.to(progressBar, { scaleX: objectScale, duration: 1, ease: \u0026#34;power2.inOut\u0026#34;, transformOrigin: \u0026#34;center left\u0026#34; }); ","permalink":"https://learnomancer.github.io/posts/gamified-progress-bar/","summary":"In this video, we\u0026rsquo;ll go through a bit of a tutorial on how to explore the practical side of gamification by crafting a dynamic progress bar in Articulate Storyline 360 that updates when the user earns points or gains levels.\nThe scenario: The user gains some experience points when they\u0026rsquo;re correctly answering a question. When they reach 1000 XP points, they gain a level. I want to show their progress using a progress bar.","title":"Create a Gamified Progress Bar in Articulate Storyline 360 using Javascript"},{"content":"In this video tutorial, we find out how to use CSS clip path to change the shape of our images, or rather of our image cropping areas, in Articulate Storyline 360.\nWe\u0026rsquo;re going to use Execute Javascript triggers, and, inside them, our code will add clip paths to the pictures. Then, we\u0026rsquo;ll animate those clip paths with the GSAP (Greensock Animation Platform) in order to create a nice effect.\nAlthough there already are some features available that achieve more or less the same thing in Storyline, it\u0026rsquo;s interesting to see how we can control our animation using Javascript.\nFind out more about clip paths here: https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path\nCSS clip path generator: https://10015.io/tools/css-clip-path-generator\nHere\u0026rsquo;s the video Code used Clip with circle\n1 2 3 4 5 6 7 8 9 10 var picture = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;picture\u0026#39;]\u0026#34;); // Add clip path to the selected element picture.style.clipPath = \u0026#39;circle(100%)\u0026#39;; // Animate the clip path gsap.to(picture, { duration: 3, clipPath: \u0026#39;circle(0%)\u0026#39; }); That\u0026rsquo;s all, folks!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 var picture = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;picture\u0026#39;]\u0026#34;); var character = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;character\u0026#39;]\u0026#34;); var endText = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;endText\u0026#39;]\u0026#34;); // Add clip path to the selected element picture.style.clipPath = \u0026#39;circle(100%)\u0026#39;; gsap.set(character, {opacity:0, scale:0}); gsap.set(endText, {opacity:0, scale:0}); let timeline = gsap.timeline({paused:true}); // Animate the clip path timeline.to(picture, {duration: 3, clipPath: \u0026#39;circle(30%)\u0026#39;, ease:\u0026#34;power1.out\u0026#34;}); timeline.to(character, {duration: 1, scale:1, opacity:1, ease:\u0026#34;elastic.out\u0026#34; }); timeline.to(endText, {duration:2, scale:1, opacity:1, ease:\u0026#34;elastic.inOut\u0026#34;}); timeline.to(endText, {duration: 1, scale:0, opacity:0, ease:\u0026#34;power1.out\u0026#34;}, \u0026#34;+=1\u0026#34;); timeline.to(character, {duration: 1, scale:0, opacity:0, ease:\u0026#34;power1.out\u0026#34;}, \u0026#34;\u0026lt;\u0026#34;); timeline.to(picture, {duration: 1, clipPath: \u0026#39;circle(0%)\u0026#39;, ease:\u0026#34;power1.out\u0026#34;}, \u0026#34;\u0026lt;\u0026#34;); picture.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { timeline.play(); }); ","permalink":"https://learnomancer.github.io/posts/dynamic-image-crop/","summary":"In this video tutorial, we find out how to use CSS clip path to change the shape of our images, or rather of our image cropping areas, in Articulate Storyline 360.\nWe\u0026rsquo;re going to use Execute Javascript triggers, and, inside them, our code will add clip paths to the pictures. Then, we\u0026rsquo;ll animate those clip paths with the GSAP (Greensock Animation Platform) in order to create a nice effect.\nAlthough there already are some features available that achieve more or less the same thing in Storyline, it\u0026rsquo;s interesting to see how we can control our animation using Javascript.","title":"Dynamic Image Cropping in Storyline 360 with Javascript \u0026 GSAP"},{"content":"In this video tutorial, we use the cloneNode function of Javascript to clone a png image of a sheep. And then we\u0026rsquo;ll move the clones using GSAP to create a nice division animation.\nIt was amazing to see that you can actually duplicate elements in Articulate Storyline 360 using Javascript.\nI was inspired by Doctor Strange splitting into multiple clones during the battle with Thanos from Infinity War (lol), and I wondered if we could achieve this effect in Articulate Storyline 360.\nCheck out the documentation for the cloneNode function here: https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 var sheep = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;sheep\u0026#39;]\u0026#34;); // Function to execute when the button is clicked function cloneElement(target, numClones) { // Calculate the step size based on the number of clones const step = 400 / (numClones - 1); // Total range is 400 (-200 to 200) for (let i = 0; i \u0026lt; numClones; i++) { // Clone the image const clone = target.cloneNode(true); // Append clones to the container target.parentElement.appendChild(clone); // Calculate the xPercent value for each clone const xPercent = -200 + step * i; // Animate each clone gsap.to(clone, { xPercent: xPercent, duration: 1, opacity: 1, ease: \u0026#39;power2.out\u0026#39; }); } } // Add event listener to the image sheep.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { cloneElement(sheep, 4); // Create 4 clones sheep.remove(); }); ","permalink":"https://learnomancer.github.io/posts/clone-object-storyline-360/","summary":"In this video tutorial, we use the cloneNode function of Javascript to clone a png image of a sheep. And then we\u0026rsquo;ll move the clones using GSAP to create a nice division animation.\nIt was amazing to see that you can actually duplicate elements in Articulate Storyline 360 using Javascript.\nI was inspired by Doctor Strange splitting into multiple clones during the battle with Thanos from Infinity War (lol), and I wondered if we could achieve this effect in Articulate Storyline 360.","title":"I cloned a sheep in Articulate Storyline 360"},{"content":"In this video tutorial, we\u0026rsquo;ll experiment with event listeners for mouse hover using an execute Javascript trigger in Articulate Storyline 360. These event listeners will allow us to trigger some animations when the mouse hovers over an object, and when the mouse leaves the bounding box of an object.\nWe will use these event listeners to play a GSAP animation timeline when we hover the mouse over a png image, then reverse (or rewind) the animation when the mouse no longer hovers on the image.\nI think this is a really easy to achieve effect, and the result is so much more responsive than the effect Storyline offers by default. I hope you enjoy this and use it in your projects!\nCheck out the GSAP documentation featured in this video here: https://gsap.com/resources/getting-started/control/#control-methods\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var drink = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;drink\u0026#39;]\u0026#34;); var leaf = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;leaf\u0026#39;]\u0026#34;); let timeline = gsap.timeline(); function addAnimation_Move(target){ timeline.to(target, {y:\u0026#34;-=100\u0026#34;, duration:0.5, ease:\u0026#34;power1.out\u0026#34;}); } drink.addEventListener(\u0026#39;mouseover\u0026#39;, () =\u0026gt; { addAnimation_Move(leaf); // Play the timeline forward timeline.play(); }); drink.addEventListener(\u0026#39;mouseout\u0026#39;, () =\u0026gt; { addAnimation_Move(leaf); // Reverse the timeline timeline.reverse(); }); ","permalink":"https://learnomancer.github.io/posts/play-reverse-animation-hover-storyline-360/","summary":"In this video tutorial, we\u0026rsquo;ll experiment with event listeners for mouse hover using an execute Javascript trigger in Articulate Storyline 360. These event listeners will allow us to trigger some animations when the mouse hovers over an object, and when the mouse leaves the bounding box of an object.\nWe will use these event listeners to play a GSAP animation timeline when we hover the mouse over a png image, then reverse (or rewind) the animation when the mouse no longer hovers on the image.","title":"Interactive Storyline 360: Play and Reverse Animations on Hover with Javascript \u0026 GSAP"},{"content":"In this video tutorial, we\u0026rsquo;ll explore how to click on objects in Articulate Storyline 360 and register those clicks using mouse click event listeners in Javascript. We\u0026rsquo;re going to click on multiple objects affect their properties, all by using only one trigger - the execute Javascript trigger.\nTo exemplify this, I made a hidden objects mini game. In it, you have to click on each of the objects scattered throughout the slide. Once clicked, the object will move and then disappear. And the name of the object will be crossed off a list. This is really amazing if you want to implement gamification into your projects.\nThis is something I\u0026rsquo;ve been looking forward to do for a long time, and I\u0026rsquo;m so glad I got it to work! Enjoy!\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 var shuttle = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;shuttle\u0026#39;]\u0026#34;); var satellite = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;satellite\u0026#39;]\u0026#34;); var lander = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;lander\u0026#39;]\u0026#34;); var telescope = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;telescope\u0026#39;]\u0026#34;); var shuttleText = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;shuttleText\u0026#39;]\u0026#34;); var satelliteText = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;satelliteText\u0026#39;]\u0026#34;); var landerText = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;landerText\u0026#39;]\u0026#34;); var telescopeText = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;telescopeText\u0026#39;]\u0026#34;); let timeline = gsap.timeline(); function addAnimation_MoveAndDisappear(target, targetText){ timeline.to(target, {y:\u0026#34;-=100\u0026#34;, duration:0.5, ease:\u0026#34;power1.out\u0026#34;}); timeline.set(target, {opacity:0}); timeline.set(targetText, {opacity:0}) } shuttle.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { addAnimation_MoveAndDisappear(shuttle, shuttleText); timeline.play(); }); satellite.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { addAnimation_MoveAndDisappear(satellite, satelliteText); timeline.play(); }); lander.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { addAnimation_MoveAndDisappear(lander, landerText); timeline.play(); }); telescope.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { addAnimation_MoveAndDisappear(telescope, telescopeText); timeline.play(); }); ","permalink":"https://learnomancer.github.io/posts/hidden-object-minigame-storyline-360/","summary":"In this video tutorial, we\u0026rsquo;ll explore how to click on objects in Articulate Storyline 360 and register those clicks using mouse click event listeners in Javascript. We\u0026rsquo;re going to click on multiple objects affect their properties, all by using only one trigger - the execute Javascript trigger.\nTo exemplify this, I made a hidden objects mini game. In it, you have to click on each of the objects scattered throughout the slide.","title":"Create a Hidden Object Mini Game in Storyline 360 with Just One Javascript Trigger"},{"content":"In this video tutorial, we will explore how to make a progress bar in Articulate Storyline 360.\nOur progress bar will update when we move back and forward through our slides. And, no matter how many slides we have in our project, our progress bar will scale and display the progress accurately.\nThe progress bar uses Javascript (GSAP) to animate the shape and makes use of the built-in Storyline variables showing the slide number in the project (Project.SlideNumber) or the slide number in the scene (Scene.SlideNumber).\nWe will also be able to make individual progress bar for each of our scenes, which will display only how we progress through the slides of that certain scene.\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var progressBar = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;progressBar\u0026#39;]\u0026#34;); var progressBar_scene = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;progressBar_scene\u0026#39;]\u0026#34;); var player = GetPlayer(); var JS_totalSlidesInProject = player.GetVar(\u0026#34;SL_totalSlidesInProject\u0026#34;); var JS_currentSlide = player.GetVar(\u0026#34;SL_currentSlide\u0026#34;); var JS_totalSlidesInScene = player.GetVar(\u0026#34;SL_totalSlidesInScene\u0026#34;); var JS_currentSlideInScene = player.GetVar(\u0026#34;SL_currentSlideInScene\u0026#34;); var objectScale = (JS_currentSlide / JS_totalSlidesInProject) * 1; var objectScale_scene = (JS_currentSlideInScene / JS_totalSlidesInScene) * 1; gsap.set(progressBar, {scaleX:objectScale, transformOrigin:\u0026#34;center left\u0026#34;}); gsap.set(progressBar_scene, {scaleX:objectScale_scene, transformOrigin:\u0026#34;center left\u0026#34;}); ","permalink":"https://learnomancer.github.io/posts/dynamic-progress-bar-storyline-360/","summary":"In this video tutorial, we will explore how to make a progress bar in Articulate Storyline 360.\nOur progress bar will update when we move back and forward through our slides. And, no matter how many slides we have in our project, our progress bar will scale and display the progress accurately.\nThe progress bar uses Javascript (GSAP) to animate the shape and makes use of the built-in Storyline variables showing the slide number in the project (Project.","title":"Dynamic Progress Bar for Any Number of Slides in Storyline 360 using Javascript"},{"content":"In this video tutorial, I try and replicate a morph effect in Articulate Storyline 360 by using match cuts. This is like using a sleight of hand, performing an illusion where one element seems to change shape and become the other.\nWhen, in fact, all we\u0026rsquo;re doing is cutting in the middle of an animation and inserting another animation in there, and our eye is fooled into thinking that the animation continues seamlessly.\nWe are first going to fake this morph effect by using motion paths, then we\u0026rsquo;ll move onto the GSAP Javascript library, so we have more control over our animation.\nThe idea came to my mind after watching a video from MotionXP and Ben Marirott.\nGiven that morph transitions are something many Storyline users want due to its popularity in Powerpoint, perhaps such an effect will soothe our spirits until Articulate decides to implement it.\nReferenced video, by MotionXP : https://www.youtube.com/watch?v=zikOzJUtWr4\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var triangle = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;triangle\u0026#39;]\u0026#34;); var square = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;square\u0026#39;]\u0026#34;); var timeline = gsap.timeline({ repeat:-1, yoyo:true, }); gsap.set(square,{opacity:0}); timeline.fromTo(triangle,{xPercent:0, rotation:\u0026#34;-=20\u0026#34;},{xPercent:\u0026#34;+=150\u0026#34;, rotation:0, duration:1, ease:\u0026#34;elastic.in\u0026#34;}); timeline.set(triangle,{opacity:0}); timeline.set(square,{opacity:1, rotation:0}); timeline.fromTo(square,{xPercent:\u0026#34;-=150\u0026#34;},{xPercent:0, rotation:20, duration:1, ease:\u0026#34;elastic.out\u0026#34;}); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ///---------------------ROTATION---------------- var triangle = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;triangle\u0026#39;]\u0026#34;); var square = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;square\u0026#39;]\u0026#34;); var timeline = gsap.timeline({ repeat:-1, repeatDelay:1, yoyo:true, }); timeline.set(square,{opacity:0}); timeline.to(triangle,{rotation:360, duration:1, ease:\u0026#34;elastic.in\u0026#34;}); timeline.set(triangle,{opacity:0}); timeline.set(square,{opacity:1}); timeline.from(square,{rotation:-360,duration:1, ease:\u0026#34;elastic.out\u0026#34;}); ","permalink":"https://learnomancer.github.io/posts/fake-morph-storyline-360/","summary":"In this video tutorial, I try and replicate a morph effect in Articulate Storyline 360 by using match cuts. This is like using a sleight of hand, performing an illusion where one element seems to change shape and become the other.\nWhen, in fact, all we\u0026rsquo;re doing is cutting in the middle of an animation and inserting another animation in there, and our eye is fooled into thinking that the animation continues seamlessly.","title":"Morph Transitions in Storyline 360 with Match Cuts"},{"content":"In this video tutorial, we will explore how to create an image carousel interaction in Articulate Storyline 360 in several different ways.\nWe will use motion paths to move the image carousel when the user presses some buttons, then use Storyline triggers to check for intersection and intersection end in order to clamp the movement of our carousel by hiding the buttons.\nThen, we will explore how to clamp the movement of an image carousel when we use GSAP to animate it. We will use the gsap.getProperty function to get the position of the carousel on the X axis, then use an if statement to check if it is greater or lesser than some limits we set. That way, even if the user presses a button, once the carousel reaches or exceeds that limit, the movement will not trigger.\nThen, we will explore how the user can control the same interaction by hovering over some buttons, which will cause the carousel to move to a specific position depending on which button the mouse hovers over.\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //if button_forward is pressed var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;group_1\u0026#39;]\u0026#34;); var currentX = gsap.getProperty(animationTarget, \u0026#34;xPercent\u0026#34;); var forwardLimit = -40; console.log(\u0026#34;before animation starts \u0026#34; + currentX); if(currentX \u0026gt; forwardLimit) { gsap.to(animationTarget, { duration:2, xPercent:\u0026#34;-=\u0026#34; + 10, onComplete:function(){ currentX = gsap.getProperty(animationTarget, \u0026#34;xPercent\u0026#34;); console.log(\u0026#34;on animation complete \u0026#34; + currentX); } }); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //if button_back is pressed var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;group_1\u0026#39;]\u0026#34;); var currentX = gsap.getProperty(animationTarget, \u0026#34;xPercent\u0026#34;); var backLimit = 35; console.log(\u0026#34;before animation starts \u0026#34; + currentX); if(currentX \u0026lt; backLimit) { gsap.to(animationTarget, { duration:2, xPercent:\u0026#34;+=\u0026#34; + 10, onComplete:function(){ currentX = gsap.getProperty(animationTarget, \u0026#34;xPercent\u0026#34;); console.log(\u0026#34;on animation complete \u0026#34; + currentX); } }); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;group_1\u0026#39;]\u0026#34;); var player = GetPlayer(); var currentImageHover = player.GetVar(\u0026#34;currentImageHover\u0026#34;); var xPosition; switch(currentImageHover){ case 1: xPosition = 340; gsap.to(animationTarget, {duration:2, x:xPosition}); break; case 2: xPosition = -446; gsap.to(animationTarget, {duration:2, x:xPosition}); break; case 3: xPosition = -1160; gsap.to(animationTarget, {duration:2, x:xPosition}); break; case 4: xPosition = -2009; gsap.to(animationTarget, {duration:2, x:xPosition}); break; case 5: xPosition = -2790; gsap.to(animationTarget, {duration:2, x:xPosition}); break; } ","permalink":"https://learnomancer.github.io/posts/image-carousel-storyline-360/","summary":"In this video tutorial, we will explore how to create an image carousel interaction in Articulate Storyline 360 in several different ways.\nWe will use motion paths to move the image carousel when the user presses some buttons, then use Storyline triggers to check for intersection and intersection end in order to clamp the movement of our carousel by hiding the buttons.\nThen, we will explore how to clamp the movement of an image carousel when we use GSAP to animate it.","title":"Create an image carousel in Articulate Storyline 360"},{"content":"In this video tutorial, we\u0026rsquo;ll explore how we can zoom in Articulate Storyline 360 by analyzing the options available when using the default way - zoom regions.\nThen, we will explore how to use GSAP to achieve a similar effect by modifying an object\u0026rsquo;s scale.\nWe will then control our zoom with buttons that allow us to zoom in and zoom back out to reset the view. And we\u0026rsquo;ll also control our zoomed in image using arrow buttons.\nHope you enjoy these tips and tricks. ðŸ™‚\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 //reset var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;myGroup\u0026#39;]\u0026#34;); gsap.to(animationTarget, {scale:1, xPercent:0, yPercent:0}) 1 2 3 4 5 //zoom in var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;myGroup\u0026#39;]\u0026#34;); gsap.to(animationTarget, {scale:2,transformOrigin:\u0026#34;center left\u0026#34;, duration: 5 }) 1 2 3 4 5 6 //move down var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;myGroup\u0026#39;]\u0026#34;); gsap.to(animationTarget, {yPercent:\u0026#34;-=3\u0026#34;}) ","permalink":"https://learnomancer.github.io/posts/dynamic-zoom-storyline-360/","summary":"In this video tutorial, we\u0026rsquo;ll explore how we can zoom in Articulate Storyline 360 by analyzing the options available when using the default way - zoom regions.\nThen, we will explore how to use GSAP to achieve a similar effect by modifying an object\u0026rsquo;s scale.\nWe will then control our zoom with buttons that allow us to zoom in and zoom back out to reset the view. And we\u0026rsquo;ll also control our zoomed in image using arrow buttons.","title":"Dynamic Zoom Effects in Storyline 360 using Javascript \u0026 GSAP"},{"content":"In this video tutorial, we will use Javascript and a bit of GSAP to make an Articulate Storyline 360 slide object follow the mouse cursor\u0026rsquo;s position.\nWe will use getBoundingClientRect() to get the position of our slide in the viewport, then make sure the satellite moves only when the mouse is within the bounds of the slide.\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 var player = GetPlayer(); var satellite = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;satellite\u0026#39;]\u0026#34;); var offsetX = 30; var offsetY = 30; //this will execute each time we move the mouse document.addEventListener(\u0026#39;mousemove\u0026#39;, function(event){ //select the slide var slide = document.getElementById(\u0026#39;slide\u0026#39;); //find out what distance it is from the edges of the viewport var slideRect = slide.getBoundingClientRect(); //declare two variables, and use them to store the position of the mouse var mouseX = event.clientX; var mouseY = event.clientY; //check if the mouse is moving ONLY within the slide if(mouseX \u0026gt;= slideRect.left \u0026amp;\u0026amp; mouseX \u0026lt;= slideRect.right \u0026amp;\u0026amp; mouseY \u0026gt;= slideRect.top \u0026amp;\u0026amp; mouseY \u0026lt;= slideRect.bottom ){ //adjust the coordinates based on the position and size of the slide var adjustedX = mouseX - slideRect.left + offsetX; var adjustedY = mouseY - slideRect.top + offsetY; //ensure that the mouse doesn\u0026#39;t go beyond the right and bottom edge of the slide adjustedX = Math.max(0, Math.min(slideRect.right, adjustedX)); adjustedY = Math.max(0, Math.min(slideRect.bottom, adjustedY)); //setting the text variables so we can see them update in storyline player.SetVar(\u0026#34;SL_mouseX\u0026#34;, adjustedX); player.SetVar(\u0026#34;SL_mouseY\u0026#34;, adjustedY); //animate the satellite gsap.to(satellite, {x:adjustedX, y:adjustedY}); }; }); ","permalink":"https://learnomancer.github.io/posts/object-follow-mouse-cursor-storyline-360/","summary":"In this video tutorial, we will use Javascript and a bit of GSAP to make an Articulate Storyline 360 slide object follow the mouse cursor\u0026rsquo;s position.\nWe will use getBoundingClientRect() to get the position of our slide in the viewport, then make sure the satellite moves only when the mouse is within the bounds of the slide.\nHere\u0026rsquo;s the video Code used 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 var player = GetPlayer(); var satellite = document.","title":"Make Objects Follow Your Mouse Cursor in Storyline 360 with JavaScript \u0026 GSAP"},{"content":"In this video tutorial, we\u0026rsquo;ll go through a few projects that will help us understand how to implement GSAP to create complex animations, emphasis animations and enhanced interactions in Articulate Storyline 360.\nGSAP (Greensock Animation Platform) is a Javascript code library that is already integrated into Storyline, which makes it easier for us to animate our slide objects with code to increase interactivity and perhaps cut down on development time for our e-learning projects.\nThis should be an interesting topic for intermediate to advance elearning developers using Storyline.\nHere\u0026rsquo;s the video Code used 1 - Car 1 2 3 4 5 6 7 8 9 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;car\u0026#39;]\u0026#34;); gsap.to(animationTarget, { x: \u0026#34;+=100\u0026#34;, duration:2, ease: \u0026#34;elastic.inOut(1,0.3)\u0026#34;, scale:2 }); 2 - Astronaut 1 2 3 4 5 6 7 8 9 10 11 var elementToAnimate= document.querySelector(\u0026#34;[data-acc-text=\u0026#39;astronaut\u0026#39;]\u0026#34;); gsap.to(elementToAnimate, { repeat:-1, yoyo:true, duration: 2, ease: \u0026#34;power1.inOut\u0026#34;, yPercent: -5 }); 3 - Ghost 1 2 3 4 5 6 7 8 9 10 11 12 var elementToAnimate= document.querySelector(\u0026#34;[data-acc-text=\u0026#39;ghost\u0026#39;]\u0026#34;); gsap.to(elementToAnimate, { opacity:0, duration:2 }); var player = GetPlayer(); var currentGhostOpacity = player.GetVar(\u0026#34;SL_currentGhostOpacity\u0026#34;); var currentGhostOpacity = player.SetVar(\u0026#34;SL_currentGhostOpacity\u0026#34;,0); 1 2 3 4 5 6 7 8 9 10 11 12 var elementToAnimate= document.querySelector(\u0026#34;[data-acc-text=\u0026#39;ghost\u0026#39;]\u0026#34;); gsap.to(elementToAnimate, { opacity:1, duration:2 }); var player = GetPlayer(); var currentGhostOpacity = player.GetVar(\u0026#34;SL_currentGhostOpacity\u0026#34;); var currentGhostOpacity = player.SetVar(\u0026#34;SL_currentGhostOpacity\u0026#34;,100); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 var elementToAnimate= document.querySelector(\u0026#34;[data-acc-text=\u0026#39;ghost\u0026#39;]\u0026#34;); var player = GetPlayer(); var currentGhostOpacity = player.GetVar(\u0026#34;SL_currentGhostOpacity\u0026#34;); currentGhostOpacity = currentGhostOpacity - 10; currentGhostOpacity = currentGhostOpacity/100; if (currentGhostOpacity \u0026gt;= 0) { gsap.to(elementToAnimate, { opacity:currentGhostOpacity, duration:2 }); currentGhostOpacity = currentGhostOpacity*100; player.SetVar(\u0026#34;SL_currentGhostOpacity\u0026#34;,currentGhostOpacity); }; 4 - Scale 1 2 3 4 5 6 7 8 9 10 11 var elementToAnimate= document.querySelector(\u0026#34;[data-acc-text=\u0026#39;lungs\u0026#39;]\u0026#34;); gsap.to(elementToAnimate, { scale:0.95, duration:2, yoyo:true, repeat:-1, ease: \u0026#34;sine.inOut\u0026#34;, }); 5 - Rotation 1 2 3 4 var star3 = document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;star-3\u0026#39;]\u0026#34;); gsap.to(star3, 12, {rotation:360, ease:Linear.easeNone, repeat:-1, transformOrigin: \u0026#34;50% -50%\u0026#34;}); 6 - Slider 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;star\u0026#39;]\u0026#34;); var sliderStart = 230; var sliderEnd = 720; var sliderLength = sliderEnd - sliderStart; var player = GetPlayer(); var sliderPosition = player.GetVar(\u0026#34;sliderPosition\u0026#34;); var sliderRotation = (sliderPosition - sliderStart) / sliderLength * 360; var sliderOpacity = 1- ((sliderPosition - sliderStart) / sliderLength); gsap.set(animationTarget, { x:sliderPosition, rotation:sliderRotation, opacity:sliderOpacity }); 7 - Stagger 1 2 3 4 5 6 7 var animationTarget = document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;vehicle\u0026#39;]\u0026#34;); gsap.to(animationTarget, { x: \u0026#34;+=50\u0026#34;, stagger: 1, }); 8 - Timelines 1 2 3 4 5 6 7 8 9 var car = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;car\u0026#39;]\u0026#34;); var van = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;van\u0026#39;]\u0026#34;); var motorbike = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;motorbike\u0026#39;]\u0026#34;); let myTimeline = gsap.timeline(); myTimeline.to(motorbike, {x:\u0026#34;+=100\u0026#34;, duration: 3}); myTimeline.to(van, {x:\u0026#34;+=70\u0026#34;, duration: 1}, \u0026#34;\u0026lt;\u0026#34;); myTimeline.to(car, {x:\u0026#34;+=50\u0026#34;, ease:\u0026#34;back.inOut\u0026#34; , duration: 2}, \u0026#34;+=1\u0026#34;); 9 - Animated counter 1 2 3 4 5 6 7 8 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;counter\u0026#39;]\u0026#34;); gsap.from(animationTarget, { y:\u0026#34;-1100\u0026#34;, duration:3, ease:\u0026#34;power1.inOut\u0026#34;, }); 10 - Heart timeline 1 2 3 4 5 6 7 8 var heart = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;heart\u0026#39;]\u0026#34;); let timeline = gsap.timeline(); timeline.to(heart, {scale: 1.05, ease:\u0026#34;power1.in\u0026#34;, duration:0.2}); timeline.to(heart, {scale: 0.95, ease:\u0026#34;power1.in\u0026#34;, duration:1}); timeline.repeat(-1); timeline.yoyo(true); 1 2 3 4 5 6 7 8 9 10 11 var heartTimeline = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;heartTimeline\u0026#39;]\u0026#34;); var player = GetPlayer(); var sliderPosition = player.GetVar(\u0026#34;heartTimelineSliderPosition\u0026#34;); var invertedSliderPosition = 1 - sliderPosition gsap.set(heartTimeline, { x:invertedSliderPosition, }); 11 - Card flip 1 2 3 4 5 6 7 8 var card_front = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;card_front\u0026#39;]\u0026#34;); var card_back = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;card_back\u0026#39;]\u0026#34;); let card_back_timeline = gsap.timeline(); card_back_timeline.set(card_front,{rotateY:90}); card_back_timeline.to(card_back,{rotateY:90, duration:0.5}); card_back_timeline.to(card_front,{rotateY:0, duration:0.5}); 1 2 3 4 5 6 7 8 var card_front = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;card_front\u0026#39;]\u0026#34;); var card_back = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;card_back\u0026#39;]\u0026#34;); let card_front_timeline = gsap.timeline(); card_front_timeline.set(card_back,{rotateY:-90}); card_front_timeline.to(card_front,{rotateY:-90, duration:0.5}); card_front_timeline.to(card_back,{rotateY:0, duration:0.5}); 12 - Animated countdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var player = GetPlayer(); var myNumber = player.GetVar(\u0026#34;myNumber\u0026#34;); gsap.to( {value:myNumber}, {duration:10, value:1500, ease:\u0026#34;linear\u0026#34;, onUpdate:function(){ myNumber = Math.round(this.targets()[0].value / 50) * 50; console.log(myNumber); player.SetVar(\u0026#34;myNumber\u0026#34;,myNumber); }, onComplete:function(){ console.log(\u0026#34;animation complete!\u0026#34;); } } ); 13 - Image carousel 1 2 3 4 5 6 7 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;group_1\u0026#39;]\u0026#34;); //if button_back is pressed gsap.to(animationTarget, { duration:2, x:\u0026#34;-=15vw\u0026#34; }); 1 2 3 4 5 6 7 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;group_1\u0026#39;]\u0026#34;); //if button_forward is pressed gsap.to(animationTarget, { duration:2, x:\u0026#34;+=15vw\u0026#34; }); 14 - Wheel of fortune 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var animationTarget = document.querySelector(\u0026#34;[data-acc-text=\u0026#39;wheelOfFortune\u0026#39;]\u0026#34;); var player = GetPlayer(); var SL_rotation = player.GetVar(\u0026#34;wheelOfFortuneRotation\u0026#34;); var maximumRotation = 720; function getRandomInt(max) { return Math.floor(Math.random() * max); } var randomRotation = getRandomInt(maximumRotation); player.SetVar(\u0026#34;wheelOfFortuneRotation\u0026#34;, randomRotation); gsap.to(animationTarget, { rotation: \u0026#34;+=\u0026#34; + randomRotation, duration:3 }); 15 - Boom boom device 1 2 3 4 // on timeline start var boomMessage = document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;boomMessage\u0026#39;]\u0026#34;); gsap.set(boomMessage, {opacity:0}); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // when button is clicked var player = GetPlayer(); var myNumber = player.GetVar(\u0026#34;boomBoomTimer\u0026#34;); var windowPanes = document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;window\u0026#39;]\u0026#34;); var boomMessage = document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;boomMessage\u0026#39;]\u0026#34;); var boomContainer = document.querySelectorAll(\u0026#34;[data-acc-text=\u0026#39;boomBoomContainer\u0026#39;]\u0026#34;); gsap.to( {value:myNumber}, {duration:5, value:0, ease:\u0026#34;linear\u0026#34;, onUpdate:function(){ myNumber = Math.round(this.targets()[0].value); player.SetVar(\u0026#34;boomBoomTimer\u0026#34;,myNumber); }, onComplete:function(){ console.log(\u0026#34;animation complete!\u0026#34;); gsap.set(boomContainer, {opacity:0}); gsap.set(boomMessage, {opacity:1}); gsap.to(windowPanes, {xPercent:-200, yPercent:1000, stagger:0.2}); } } ); ","permalink":"https://learnomancer.github.io/posts/storyline-360-crash-course-javascript-gsap-copy/","summary":"In this video tutorial, we\u0026rsquo;ll go through a few projects that will help us understand how to implement GSAP to create complex animations, emphasis animations and enhanced interactions in Articulate Storyline 360.\nGSAP (Greensock Animation Platform) is a Javascript code library that is already integrated into Storyline, which makes it easier for us to animate our slide objects with code to increase interactivity and perhaps cut down on development time for our e-learning projects.","title":"Storyline 360 Crash Course on animation and interactivity using GSAP \u0026 Javascript"},{"content":"In this video tutorial, we\u0026rsquo;ll be exploring what happens when you want to display checkmarks next to each answer in order to provide feedback to your users in Articulate Storyline 360.\nWe will use a graded question slide with shuffle answers enabled. Even though our answers are set to a random order every time the question loads, we still want the checkmarks to appear next to their assigned answer.\nWe will use a Storyline bug and copy our checkmarks into the normal state of each answer so that they can move when the answer boxes move.\nWe will also use the GSAP Javascript library to affect the opacity / transparency of our checkmarks, so that we can hide and unhide them on the correct and incorrect feedback layers.\nHope you enjoy these tips and tricks. ðŸ™‚\nHere\u0026rsquo;s the video ","permalink":"https://learnomancer.github.io/posts/feedback-checkmarks-shuffle-answers-copy/","summary":"In this video tutorial, we\u0026rsquo;ll be exploring what happens when you want to display checkmarks next to each answer in order to provide feedback to your users in Articulate Storyline 360.\nWe will use a graded question slide with shuffle answers enabled. Even though our answers are set to a random order every time the question loads, we still want the checkmarks to appear next to their assigned answer.\nWe will use a Storyline bug and copy our checkmarks into the normal state of each answer so that they can move when the answer boxes move.","title":"Showing Feedback Checkmarks on Shuffle Answers in Storyline 360"}]